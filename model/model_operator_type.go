/*
Metoro API

API for managing Metoro environments, alerts, and dashboards.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

// OperatorType Type of comparison operator
type OperatorType string

// List of OperatorType
const (
	GREATER_THAN          OperatorType = "greaterThan"
	LESS_THAN             OperatorType = "lessThan"
	GREATER_THAN_OR_EQUAL OperatorType = "greaterThanOrEqual"
	LESS_THAN_OR_EQUAL    OperatorType = "lessThanOrEqual"
	EQUALS                OperatorType = "equals"
	NOT_EQUALS            OperatorType = "notEquals"
)

// All allowed values of OperatorType enum
var AllowedOperatorTypeEnumValues = []OperatorType{
	"greaterThan",
	"lessThan",
	"greaterThanOrEqual",
	"lessThanOrEqual",
	"equals",
	"notEquals",
}

func (v *OperatorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OperatorType(value)
	for _, existing := range AllowedOperatorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OperatorType", value)
}

// NewOperatorTypeFromValue returns a pointer to a valid OperatorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOperatorTypeFromValue(v string) (*OperatorType, error) {
	ev := OperatorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OperatorType: valid values are %v", v, AllowedOperatorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OperatorType) IsValid() bool {
	for _, existing := range AllowedOperatorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OperatorType value
func (v OperatorType) Ptr() *OperatorType {
	return &v
}

type NullableOperatorType struct {
	value *OperatorType
	isSet bool
}

func (v NullableOperatorType) Get() *OperatorType {
	return v.value
}

func (v *NullableOperatorType) Set(val *OperatorType) {
	v.value = val
	v.isSet = true
}

func (v NullableOperatorType) IsSet() bool {
	return v.isSet
}

func (v *NullableOperatorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperatorType(val *OperatorType) *NullableOperatorType {
	return &NullableOperatorType{value: val, isSet: true}
}

func (v NullableOperatorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperatorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
